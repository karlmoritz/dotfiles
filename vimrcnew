set nocompatible
set showcmd                 " show number of lines selected
set relativenumber          " show line numbers relative to current
scriptencoding utf-8
set encoding=utf-8
set ignorecase              " search by default case insensitive
set smartcase               " if there is an upper char, search sensitive
set textwidth=80

source ~/.vimrclocal
filetype plugin indent on
syntax on


fun! SetupVAM()
  let c = get(g:, 'vim_addon_manager', {})
  let g:vim_addon_manager = c
  let c.plugin_root_dir = expand('$HOME', 1) . '/.vim/vim-addons'
  " most used options you may want to use:
  "   " let c.log_to_buf = 1
  "     " let c.auto_install = 0
  let  &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'
  if !isdirectory(c.plugin_root_dir.'/vim-addon-manager/autoload')
    execute '!git clone --depth=1
          \ git://github.com/MarcWeber/vim-addon-manager '
          \ shellescape(c.plugin_root_dir.'/vim-addon-manager',
          \ 1)
  endif

  " This provides the VAMActivate command, you
  " could be passing plugin names, too
  call vam#ActivateAddons([], {})
endfun

call SetupVAM()

VAMActivate The_NERD_Commenter Solarized
VAMActivate github:fholgado/minibufexpl.vim bufkill 
VAMActivate github:itchyny/lightline.vim
VAMActivate a
" VAMActivate github:raymond-w-ko/vim-lua-indent

VAMActivate lua%4344
" VAMActivate vim-misc
" VAMActivate clang

  " call vam#ActivateAddons(['bufkill'])
  " call vam#ActivateAddons(['Supertab']) " for smart tab key
  " " call vam#ActivateAddons(['auctex'])
  " call vam#ActivateAddons(['github:lervag/vim-latex'])
  " " call vam#ActivateAddons(['github:honza/vim-snippets'])
  " " call vam#ActivateAddons(['github:MarcWeber/ultisnips'])
  " " Find a better replacement for this one
  " call vam#ActivateAddons(['AutomaticLaTeXPlugin'])

set expandtab
" set tabstop=2
set shiftwidth=2
set softtabstop=2

if !has('gui_running')
    set t_Co=16
  endif

" Solarized
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

" lightline Setup
" set guifont=Liberation\ Mono\ for\ Powerline\ 12
set laststatus=2 " Launch airline with single tab open

" colorscheme could also be solarized, but this one is nicer
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'component': {
      \   'readonly': '%{&readonly?"î‚¢":""}',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }


" REMAPPINGS

" Use , for the leader key as opposed to \
let mapleader = ","
let maplocalleader = ","

" Ctrl-C and Ctrl-V systemwide
map  <C-V> "+gP
cmap <C-V> <C-R>+
vnoremap <C-C> "+y

" Comment settings
let g:NERDSpaceDelims = 1

if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

map <C-left> :bp<CR>
map <C-right> :bn<CR>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>f :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

nnoremap <Leader>q :BW<CR>

" Make ; work same as :. No more shift :)
nnoremap ; :

" Use <leader><space> to clean highlights
nnoremap <leader><space> :noh<cr>

" Easy out of insert mode with double i.
inoremap ii <ESC>


" Some syntax highlighting to annoy me if I mistype.
set colorcolumn=80
highlight ColorColumn guibg=#073642
highlight TrailingWhitespace guibg=#b58900
highlight ExtraWhitespace    guibg=#b58900
highlight TrailingWhitespace ctermbg=3
highlight ColorColumn ctermbg=0
highlight ExtraWhitespace    ctermbg=3

autocmd Syntax * call matchadd('TrailingWhitespace', '\s\+$')

" Automatically remove trailing whitespace from certain filetypes.
autocmd FileType c,cpp,java,php,markdown,sh,python,tex,lua autocmd BufWritePre <buffer> :%s/\s\+$//e

"here is a more exotic version of my original Kwbd script
"delete the buffer; keep windows; create a scratch buffer if no buffers left
function s:Kwbd(kwbdStage)
  if(a:kwbdStage == 1)
    if(!buflisted(winbufnr(0)))
      bd!
      return
    endif
    let s:kwbdBufNum = bufnr("%")
    let s:kwbdWinNum = winnr()
    windo call s:Kwbd(2)
    execute s:kwbdWinNum . 'wincmd w'
    let s:buflistedLeft = 0
    let s:bufFinalJump = 0
    let l:nBufs = bufnr("$")
    let l:i = 1
    while(l:i <= l:nBufs)
      if(l:i != s:kwbdBufNum)
        if(buflisted(l:i))
          let s:buflistedLeft = s:buflistedLeft + 1
        else
          if(bufexists(l:i) && !strlen(bufname(l:i)) && !s:bufFinalJump)
            let s:bufFinalJump = l:i
          endif
        endif
      endif
      let l:i = l:i + 1
    endwhile
    if(!s:buflistedLeft)
      if(s:bufFinalJump)
        windo if(buflisted(winbufnr(0))) | execute "b! " . s:bufFinalJump | endif
      else
        enew
        let l:newBuf = bufnr("%")
        windo if(buflisted(winbufnr(0))) | execute "b! " . l:newBuf | endif
      endif
      execute s:kwbdWinNum . 'wincmd w'
    endif
    if(buflisted(s:kwbdBufNum) || s:kwbdBufNum == bufnr("%"))
      execute "bd! " . s:kwbdBufNum
    endif
    if(!s:buflistedLeft)
      set buflisted
      set bufhidden=delete
      set buftype=
      setlocal noswapfile
    endif
  else
    if(bufnr("%") == s:kwbdBufNum)
      let prevbufvar = bufnr("#")
      if(prevbufvar > 0 && buflisted(prevbufvar) && prevbufvar != s:kwbdBufNum)
        b #
      else
        bn
      endif
    endif
  endif
endfunction

command! Kwbd call s:Kwbd(1)
nnoremap <silent> <Plug>Kwbd :<C-u>Kwbd<CR>

" Create a mapping (e.g. in your .vimrc) like this:
nmap <leader>q <Plug>Kwbd
